# Justin Lee
# 2371816
# justlee@chapman.edu
# CPSC 408-01
# Assignment 2
import mysql.connector
import re
from mysql.connector import errorcode

# Connect to database
try:
    db = mysql.connector.connect(
        host="34.102.4.20",
        user="root",
        passwd="X<XY4E-hFVS#G~<v",
        database="fall2023_cpsc408"
    )
    cursor = db.cursor()
except mysql.connector.Error as err:
    if err.errno == errorcode.ER_ACCESS_DENIED_ERROR:
        print("Something is wrong with your username or password")
    elif err.errno == errorcode.ER_BAD_DB_ERROR:
        print("Database does not exist")
    else:
        print(err)


# Function to list all products that are out of stock
def out_of_stock():
    try:
        cursor.execute("SELECT ProductName FROM Products WHERE UnitsInStock > 0")
    except Exception as e:
        print(f"Error executing SQL query: {e}")
        return
    result = cursor.fetchall()
    if not result:
        print("No out-of-stock products found.")
        return
    for x in result:
        print(x)


# Find the total number of orders for each customer
def total_orders():
    try:
        cursor.execute("SELECT CustomerName, COUNT(OrderDetails.OrderID) "
                       "FROM Orders "
                       "JOIN OrderDetails ON Orders.OrderId = OrderDetails.OrderId "
                       "JOIN Customers ON Orders.CustomerID = Customers.CustomerID "
                       "GROUP BY CustomerName")
    except Exception as e:
        print(f"Error executing SQL query: {e}")
        return
    result = cursor.fetchall()
    if not result:
        print("No orders found.")
        return
    for x in result:
        print(x)


# Display the details of the most expensive product ordered in each order.
def most_expensive():
    try:
        cursor.execute("SELECT OrderId, Products.ProductName, Products.ProductID, MAX(OrderDetails.UnitPrice) "
                       "FROM OrderDetails "
                       "JOIN Products ON OrderDetails.ProductID = Products.ProductID "
                       "GROUP BY OrderDetails.OrderID, Products.ProductName, Products.ProductID")
    except Exception as e:
        print(f"Error executing SQL query: {e}")
        return
    result = cursor.fetchall()
    if not result:
        print("No orders found.")
        return
    for x in result:
        print(x)


# Retrieve a list of products that have never been ordered.
def never_ordered():
    try:
        cursor.execute("SELECT ProductName "
                       "FROM Products "
                       "LEFT JOIN OrderDetails ON Products.ProductID = OrderDetails.ProductID "
                       "WHERE OrderDetails.ProductID IS NULL")
    except Exception as e:
        print(f"Error executing SQL query: {e}")
        return
    result = cursor.fetchall()
    if not result:
        print("No orders found.")
        return
    for x in result:
        print(x)


# Show the total revenue (price * quantity) generated by each supplier.
def total_revenue():
    try:
        cursor.execute("SELECT Suppliers.SupplierName, SUM(Products.UnitPrice * OrderDetails.Quantity) "
                       "FROM Suppliers "
                       "JOIN Products ON Suppliers.SupplierID = Products.SupplierID "
                       "JOIN OrderDetails ON Products.ProductID = OrderDetails.ProductID "
                       "GROUP BY Suppliers.SupplierName")
    except Exception as e:
        print(f"Error executing SQL query: {e}")
        return
    result = cursor.fetchall()
    if not result:
        print("No orders found.")
        return
    for x in result:
        print(x)


# Add new order by calling stored procedure in database
def add_order():
    import re  # Import the regular expression module for date validation

    # Get user input for customer ID
    while True:
        try:
            customer_id = int(input("Please enter the customer ID: "))
            break  # Exit the loop if input is valid
        except ValueError:
            print("Invalid input. Please enter a valid integer.")

    # Get user input for product ID
    while True:
        try:
            product_id = int(input("Please enter the product ID: "))
            break  # Exit the loop if input is valid
        except ValueError:
            print("Invalid input. Please enter a valid integer.")

    # Get user input for quantity
    while True:
        try:
            quantity = int(input("Please enter the quantity: "))
            break  # Exit the loop if input is valid
        except ValueError:
            print("Invalid input. Please enter a valid integer.")

    # Get user input for order date
    date_pattern = re.compile(r"\d{4}-\d{2}-\d{2}")
    while True:
        order_date = input("Please enter the order date (YYYY-MM-DD): ")
        if date_pattern.match(order_date):
            break  # Exit the loop if input is valid
        else:
            print("Invalid date format. Please use YYYY-MM-DD.")

    try:
        cursor.callproc("AddNewOrder", (customer_id, product_id, quantity, order_date))
        print("Order added successfully.")
    except Exception as e:
        print(f"Error executing SQL query: {e}")
        return
    db.commit()


# Main function
def main():
    while True:
        print("1. List all products that are out of stock")
        print("2. Find the total number of orders for each customer")
        print("3. Display the details of the most expensive product ordered in each order")
        print("4. Retrieve a list of products that have never been ordered")
        print("5. Show the total revenue (price * quantity) generated by each supplier")
        print("6. Add new order")
        print("7. Exit")
        choice = int(input("Please enter a number: "))
        if choice == 1:
            out_of_stock()
        elif choice == 2:
            total_orders()
        elif choice == 3:
            most_expensive()
        elif choice == 4:
            never_ordered()
        elif choice == 5:
            total_revenue()
        elif choice == 6:
            add_order()
        elif choice == 7:
            db.close()
            break
        else:
            print("Invalid input. Please try again.")


main()
